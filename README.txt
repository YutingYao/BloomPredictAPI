# 蓝藻预测模型后端API项目

## 项目概述

本项目是一个蓝藻密度预测系统的后端API实现，采用多种机器学习模型（LSTM、GRU-D、TCN、XGBoost）对太湖流域6个监测站点的蓝藻密度进行时间序列预测。

## 项目特点

- **多模型对比**: 实现并比较了LSTM、GRU-D、TCN和XGBoost四种预测模型
- **多站点监测**: 覆盖太湖流域6个关键监测站点
- **长期预测**: 支持1-30天的蓝藻密度增长率预测
- **高精度预测**: GRU-D模型相对LSTM平均改善率达50.07%

## 监测站点

项目覆盖太湖流域6个重要监测站点，按生态区域分类：

### 重污染与高风险区
- **胥湖心**: 重点监测区域，GRU-D模型改善率77.41%
- **锡东水厂**: 水质处理关键点，GRU-D模型改善率55.13%

### 背景与参照区
- **平台山**: 背景监测点，XGBoost模型表现优异
- **拖山(tuoshan)**: 参照区域，GRU-D模型改善率79.78%

### 边界条件区
- **兰山嘴(lanshanzui)**: 边界监测点，GRU-D模型改善率28.83%
- **五里湖心**: 重要湖心区域，GRU-D模型改善率42.93%

## 模型对比结果

### 性能总结
- **GRU-D**: 整体最优，平均改善率50.07%，在所有站点表现稳定
- **XGBoost**: 在部分站点表现优异，平均改善率16.43%
- **TCN**: 整体表现一般，平均改善率-1.88%
- **LSTM**: 基准模型，作为对比基础

### 模型特点
1. **LSTM模型**
   - 三门控机制（输入门、遗忘门、输出门）
   - 长期记忆能力强
   - 参数量大，训练复杂度高

2. **GRU-D模型** ⭐ 推荐
   - 专为缺失数据设计的GRU改进版
   - 两门控机制（更新门、重置门）
   - 处理噪声和不完整数据能力强
   - 训练速度快，预测精度高

3. **TCN模型**
   - 基于卷积神经网络
   - 因果卷积+扩张卷积
   - 并行计算效率高

4. **XGBoost模型**
   - 梯度提升树算法
   - 在某些站点表现优异
   - 可解释性强

## 预测指标

使用基础水质指标进行预测：
- 温度(T)
- 溶解氧(O₂)
- 总氮(Nₜ)
- 总磷(Pₜ)
- 氨氮(N_NH)
- pH值
- 浊度(τ)
- 电导率(σ)
- 高锰酸盐指数(COD_Mn)
- 降雨量(R)
- 风速(u)
- 短波辐射(Iₛ)

## 技术架构

### 1. 后端：Python API 服务器
- **职责**: 接收前端请求，调用机器学习模型进行预测，返回结果
- **推荐框架**: 
  - **FastAPI**: 高性能，自动API文档生成，类型检查
  - **Flask**: 轻量级，快速开发
  - **Django**: 功能全面，适合复杂应用

### 2. 工作流程
```
HTTP请求 → 数据预处理 → 模型预测 → 结果后处理 → JSON响应
```

详细步骤：
1. 创建API路由 `/api/predict`
2. 接收POST请求，解析JSON数据
3. 数据预处理（归一化、特征工程）
4. 加载对应站点和预测天数的模型
5. 执行预测得到蓝藻密度增长率
6. 结果格式化并返回JSON响应

## 项目文件结构

```
后端API/
├── ★221-GRUD+lstm+tcn+xgb-综合比较-基础指标+去除负数.ipynb  # 模型训练和对比
├── ★221-GRUD+lstm+tcn+xgb-综合比较-基础指标+去除负数.md     # 分析报告
├── 00-*_model_data_*-去除负数.pkl                           # 各站点训练好的模型
├── ★221-GRUD+lstm+tcn+xgb-综合比较-基础指标+去除负数_files/ # 结果图表
└── README.txt                                              # 项目说明
```

## 模型文件说明

项目包含6个站点的LSTM模型文件：
- `00-lstm_model_data_胥湖心-去除负数.pkl`
- `00-lstm_model_data_锡东水厂-去除负数.pkl`
- `00-lstm_model_data_平台山-去除负数.pkl`
- `00-lstm_model_data_tuoshan-去除负数.pkl`
- `00-lstm_model_data_lanshanzui-去除负数.pkl`
- `00-lstm_model_data_五里湖心-去除负数.pkl`

## API设计建议

### 预测接口
```http
POST /api/predict
Content-Type: application/json

{
  "station": "胥湖心",
  "model_type": "grud",
  "predict_days": 7,
  "input_data": {
    "temperature": 25.5,
    "oxygen": 8.2,
    "TN": 1.5,
    "TP": 0.08,
    // ... 其他水质指标
  }
}
```

### 响应格式
```json
{
  "success": true,
  "data": {
    "station": "胥湖心",
    "model_type": "grud",
    "predict_days": 7,
    "prediction": [0.12, 0.15, 0.18, 0.21, 0.19, 0.17, 0.16],
    "confidence": 0.85,
    "rmse": 0.2567
  },
  "message": "预测成功"
}
```

## 部署建议

1. **环境要求**
   - Python 3.8+
   - PyTorch 1.8+
   - scikit-learn
   - pandas, numpy
   - FastAPI/Flask

2. **部署方式**
   - Docker容器化部署
   - 使用Gunicorn + Nginx
   - 考虑负载均衡和缓存策略

3. **性能优化**
   - 模型预加载到内存
   - 结果缓存机制
   - 异步处理长时间预测

## 下一步开发计划

1. **API实现**: 基于FastAPI框架实现预测接口
2. **模型管理**: 实现模型版本管理和热更新
3. **监控告警**: 添加预测准确性监控和异常告警
4. **可视化**: 集成预测结果可视化功能
5. **部署优化**: 容器化部署和自动化CI/CD